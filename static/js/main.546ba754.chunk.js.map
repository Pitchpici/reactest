{"version":3,"sources":["components/Wrapper/wrapper.js","components/characterCard/characterCard.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","CharacterCard","onClick","selectCharacter","name","currentScore","alt","src","image","App","state","bestScore","message","characters","unselectedCharacters","mixtiles","array","i","length","j","Math","floor","random","temp","handleButtonClick","event","preventDefault","_this","setState","allCharacters","selectedName","findCharacter","find","char","console","log","undefined","newUnselectedCharacters","filter","_this2","this","Jumbotron","Button","color","Wrapper_wrapper","map","character","characterCard_characterCard","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.546ba754.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./wrapper.css\";\n\nconst Wrapper = props => \n    <div className=\"wrapper\">\n        {props.children}\n    </div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./characterCard.css\";\n\nconst CharacterCard = props => (\n  <div className=\"card\">\n  <div className=\"img-container\">\n      {/*onClick will call selectCharacter in App.js and pass character parameter*/}\n      <a onClick={() => props.selectCharacter(props.name)} \n          className={props.currentScore === 0 ? \"imgStyle imgStylePrevious\" : \"imgStyle\"}>\n          <img className=\"cusImg\" alt={props.name} src={props.image} />\n      </a>\n  </div>\n</div>\n);\n\nexport default CharacterCard;","\nimport React, { Component } from 'react';\nimport characters from './characters.json';\nimport Wrapper from './components/Wrapper';\nimport CharacterCard from './components/characterCard';\nimport { Jumbotron , Button } from 'reactstrap';\nimport './App.css';\n\n\n\n\n\nclass App extends Component {\n  state = {\n    currentScore: 0,\n    bestScore: 0,\n    message: \"Click an image to begin.\",\n    characters: characters,\n    unselectedCharacters: characters\n  };\n\n  mixtiles = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    };\n};\n\n\nhandleButtonClick = event => {\n  event.preventDefault();\n  this.setState({\n    currentScore: 0,\n    bestScore: 0,\n    message: \"Click an image to begin.\",\n    allCharacters: characters,\n    unselectedCharacters: characters\n  });\n};\n\n\n\n selectCharacter = selectedName => {\n  //Using array.find function to find the first element in unselectedCharacters array that sattisfies the condition\n  //if no character matched then findCharacter will equals to undefined\n  const findCharacter = this.state.unselectedCharacters.find(char => char.name === selectedName);\n\nconsole.log(findCharacter);\n\n  if (findCharacter === undefined) { \n    this.setState({\n        message: \"You guessed incorrectly!\",\n        bestScore: (this.state.currentScore > this.state.bestScore) ? this.state.currentScore : this.state.bestScore,\n        currentScore: 0,\n        allCharacters: characters,\n        unselectedCharacters: characters\n       \n    });\n}\n\nelse {\n  const newUnselectedCharacters = this.state.unselectedCharacters.filter(char => char.name !== selectedName);\n  this.setState({\n      message: \"You guessed correctly!\",\n      currentScore: this.state.currentScore + 1,\n      allCharacters: characters,\n      unselectedCharacters: newUnselectedCharacters\n  });\n};\n//End\nthis.mixtiles(characters);\n  };//End\n\n\n  render() {\n    return (\n      <div>           \n        <div className=\"App\">\n            <Jumbotron>\n                <h2 className=\"App-title\">CLICKY GAME</h2>\n                <p className=\"message\">+++++++++++++++++++++++++++++++</p>\n                <p className=\"message\">{this.state.message}</p>\n                <p className=\"message\">+++++++++++++++++++++++++++++++</p>\n                <p className=\"message\">Current Score: {this.state.currentScore}</p>\n                <p className=\"message\">Top Score: {this.state.bestScore}</p>\n                <Button color=\"danger\" onClick={this.handleButtonClick}> Start Over </Button>\n            </Jumbotron>\n        </div>\n        <Wrapper>\n            {\n              //map function iterates thru characters array and displays individual image\n              //and pass to characterCard with key, character, charImage, currentScore and function selectCharacter \n              this.state.characters.map(character => (\n                  <CharacterCard \n                      key={character.id}\n                      name = {character.name}\n                      image = {character.image}\n                      currentScore = {this.state.currentScore}\n                      selectCharacter = {this.selectCharacter}\n                  />\n              ))\n            }\n      </Wrapper>\n      </div>\n    );\n  };\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}